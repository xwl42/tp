@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":GetTimeslotCommandParser" as GetTimeslotCommandParser LOGIC_COLOR
participant "c:GetTimeslotCommand" as GetTimeslotCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

box Storage STORAGE_COLOR_T1
participant "storage:Storage" as Storage STORAGE_COLOR
end box

box UI UI_COLOR_T1
participant "TimeslotsWindow" as TimeslotsWindow UI_COLOR
end box

participant "Platform" as Platform

[-> LogicManager : execute("get-timeslots")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("get-timeslots")
activate AddressBookParser

create GetTimeslotCommandParser
AddressBookParser -> GetTimeslotCommandParser : new GetTimeslotCommandParser()
activate GetTimeslotCommandParser

AddressBookParser -> GetTimeslotCommandParser : parse("")
activate GetTimeslotCommandParser

create GetTimeslotCommand
GetTimeslotCommandParser -> GetTimeslotCommand : new GetTimeslotCommand()
activate GetTimeslotCommand

GetTimeslotCommand --> GetTimeslotCommandParser
deactivate GetTimeslotCommandParser
destroy GetTimeslotCommandParser

AddressBookParser --> LogicManager : c
deactivate AddressBookParser

LogicManager -> GetTimeslotCommand : execute(model)
activate GetTimeslotCommand

GetTimeslotCommand -> Model : getTimeslots()
activate Model
Model --> GetTimeslotCommand : timeslot data
deactivate Model

GetTimeslotCommand -> GetTimeslotCommand : format ranges
create CommandResult
GetTimeslotCommand -> CommandResult : new CommandResult(message)
activate CommandResult
CommandResult --> GetTimeslotCommand
deactivate CommandResult

GetTimeslotCommand --> LogicManager : result
deactivate GetTimeslotCommand

' --- Persist state (matches LogicManager implementation) ---
LogicManager -> Storage : saveAddressBook(model.getAddressBook())
activate Storage
Storage --> LogicManager
deactivate Storage

alt model instanceof ModelManager
    LogicManager -> Storage : saveTimeslots(((ModelManager)model).getTimeslots())
    activate Storage
    Storage --> LogicManager
    deactivate Storage
end

' --- Show UI only if command produced timeslot ranges ---
alt commandResult.getTimeslotRanges() != null && not empty
    opt schedule UI via JavaFX
        LogicManager -> Platform : runLater(showTimetable(ranges, allTimeslots))
        activate Platform
        Platform -> TimeslotsWindow : showTimetable(ranges, allTimeslots)
        activate TimeslotsWindow
        TimeslotsWindow --> Platform : shown
        deactivate TimeslotsWindow
        Platform --> LogicManager : scheduled
        deactivate Platform
    end
    note right of LogicManager
      LogicManager wraps call in try/catch and ignores
      IllegalStateException (e.g., FX not initialized in tests).
    end note
end

[<-- LogicManager
deactivate LogicManager
@enduml
