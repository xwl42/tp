@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":GradeCommandParser" as GradeCommandParser LOGIC_COLOR
participant ":GradeCommand" as GradeCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("grade 1 en/midterm s/30.5")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("grade 1 en/midterm s/30.5")
activate AddressBookParser

create GradeCommandParser
AddressBookParser -> GradeCommandParser
activate GradeCommandParser

GradeCommandParser --> AddressBookParser
deactivate GradeCommandParser

AddressBookParser -> GradeCommandParser : parse("1 en/midterm s/30.5")
activate GradeCommandParser

create GradeCommand
GradeCommandParser -> GradeCommand
activate GradeCommand

GradeCommand --> GradeCommandParser
deactivate GradeCommand

GradeCommandParser --> AddressBookParser : g
deactivate GradeCommandParser
destroy GradeCommandParser

AddressBookParser --> LogicManager : g
deactivate AddressBookParser

LogicManager -> GradeCommand : execute(m)
activate GradeCommand

GradeCommand -> Model : getFilteredPersonList()
activate Model
Model --> GradeCommand : List<Person>
deactivate Model

GradeCommand -> Model : saveAddressBook()
activate Model
Model --> GradeCommand
deactivate Model

GradeCommand -> Model : setPerson(oldPerson, gradedPerson)
activate Model
Model --> GradeCommand
deactivate Model

GradeCommand -> Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)
activate Model
Model --> GradeCommand
deactivate Model

create CommandResult
GradeCommand -> CommandResult : new CommandResult(...)
activate CommandResult
CommandResult --> GradeCommand
deactivate CommandResult

GradeCommand --> LogicManager : r
deactivate GradeCommand

[<-- LogicManager
deactivate LogicManager
@enduml
